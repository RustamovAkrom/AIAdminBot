import os
import re

import openai
from aiogram import Router, F, Bot
from aiogram.types import Message, PhotoSize, Video, Document
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from apps.bot.google.ai_studio import ask_gemini
from dotenv import load_dotenv


load_dotenv()
router = Router()

openai.api_key = os.getenv("OPENAI_API_KEY")


class AIState(StatesGroup):
    active = State()


def escape_markdown(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ Telegram MarkdownV2, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞–ª—Å—è —Ñ–æ—Ä–º–∞—Ç.
    """
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


async def send_ai_response(bot, chat_id, text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI-–æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Markdown –∏ –¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏.
    """
    text = escape_markdown(text)

    # –î–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç Telegram)
    chunks = [text[i:i + 4096] for i in range(0, len(text), 4096)]

    for chunk in chunks:
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å MarkdownV2
            await bot.send_message(chat_id=chat_id, text=chunk, parse_mode="MarkdownV2")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Markdown: {e}")
            try:
                # –ï—Å–ª–∏ Markdown —Å–ª–æ–º–∞–ª—Å—è ‚Äî —à–ª—ë–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                await bot.send_message(chat_id=chat_id, text=chunk)
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# Activate AI mode
@router.message(Command("ai"))
async def cmd_ai(message: Message, state: FSMContext):
    await state.set_state(AIState.active)
    await message.answer(
        "ü§ñ AI —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.\n"
        "–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è AI-—Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit.\n"
    )


# Deactivate AI mode
@router.message(Command("exit"))
async def cmd_exit(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå AI —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è."
    )


# Recognize AI text
@router.message(AIState.active, F.text)
async def handle_ai_text(message: Message, bot: Bot):
    user_id = message.from_user.id

    processing_msg = await message.answer(
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
    )
    response = await ask_gemini(user_id, message.text)

    await processing_msg.delete()
    
    MAX_LENGTH = 4096
    for chunk in [response[i: i + MAX_LENGTH] for i in range(0, len(response), MAX_LENGTH)]:
        await bot.send_chat_action(message.chat.id, "typing")
        # await message.answer(escape_markdown(chunk))
        await send_ai_response(message.bot, message.chat.id, chunk)


# Recognize AI photo
@router.message(AIState.active, F.photo)
async def handle_ai_photo(message: Message, bot: Bot):
    user_id = message.from_user.id

    photo: PhotoSize = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    file_path = file_info.file_path
    save_path = f"downloads/{photo.file_id}.jpg"

    processing_msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à —Ñ–∞–π–ª..."
    )

    await message.bot.download_file(file_path, save_path)

    user_text = message.caption if message.caption else ""

    response = await ask_gemini(user_id, user_text, file_path=save_path)

    await processing_msg.delete()

    MAX_LENGTH = 4096
    for chunk in [response[i: i + MAX_LENGTH] for i in range(0, len(response), MAX_LENGTH)]:
        await bot.send_chat_action(message.chat.id, "typing")
        await message.answer(chunk)

    os.remove(save_path)


# Recognize AI document
@router.message(AIState.active, F.document)
async def handle_ai_document(message: Message, bot: Bot):
    user_id = message.from_user.id

    video: Document = message.document
    file_info = await message.bot.get_file(video.file_id)
    file_path = file_info.file_path
    save_path = f"downloads/{video.file_name}"

    processing_msg = await message.answer(
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à —Ñ–∞–π–ª..."
    )

    await message.bot.download_file(file_path, save_path)

    user_text = message.caption if message.caption else "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª."

    response = await ask_gemini(user_id, user_text, file_path=save_path)

    await processing_msg.delete()

    MAX_LENGTH = 4096
    for chunk in [response[i: i + MAX_LENGTH] for i in range(0, len(response), MAX_LENGTH)]:
        await bot.send_chat_action(message.chat.id, "typing")
        await message.answer(chunk)

    os.remove(save_path)


# Unknown AI
@router.message(AIState.active)
async def handle_unknown(message: Message):
    await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ!")